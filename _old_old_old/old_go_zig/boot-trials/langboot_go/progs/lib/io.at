
writeTo := /define {} /I16 { #str_ptr: /P, #str_len: /I, #out_file: /P } {
  #begin: [
    /let #n = /call /@libcFWrite [#str_ptr, 1, #str_len, #out_file],
    /let #ok = /icmp #eq /_ #n #str_len,
    /brIf #ok #end #err_case,
  ],
  #err_case: [
      /let #err_code = /call /@libcFError [#out_file],
      /brTo #end,
  ],
  #end: [
    /let #ret_val = /phi /I16 { #begin: 0, #err_case: #err_code },
    /ret #ret_val,
  ]
}


writeToStd := /define {} /V { #str_ptr: /P, #str_len: /I, #std_file: /P/P } {
  #begin: [
    /let #out_file = /load /P #std_file,
    /let #err = /call /@writeTo [#str_ptr, #str_len, #out_file],
    /switch (/I16 #err) #end { /_ 1: #exit_on_err },
  ],
  #exit_on_err: [
    /call /@libcExit [1], // TODO noreturn annotation
    /unreachable,
  ],
  #end: [
    /ret,
  ],
}


writeErr := /define {} /V { #str_ptr: /P, #str_len: /I } {
  #: [
    /call /@writeToStd [#str_ptr, #str_len, /@libc_stderr],
    /ret,
  ],
}


writeOut := /define {} /V { #str_ptr: /P, #str_len: /I } {
  #: [
    /call /@writeToStd [#str_ptr, #str_len, /@libc_stdout],
    /ret,
  ],
}


readFrom := /define {} /I { #buf_ptr: /P, #buf_len: /I, #in_file: /P } {
  #: [
    /let #num_bytes_read = /call /@libcFRead [#buf_ptr, 1, #buf_len, #in_file],
    /ret #num_bytes_read,
  ],
}


readInOrDie := /define {} /I { #buf_ptr: /P, #buf_len: /I } {
  #begin: [
    /let #in_file = /load /P /@libc_stdin,
    /let #num_bytes_read = /call /@readFrom [#buf_ptr, #buf_len, #in_file],
    /let #err = /call /@libcFError [#in_file],
    /let #ok = /icmp #eq /I16 #err 0,
    /brIf #ok #end #die,
  ],
  #die: [
    /call /@libcExit [1], // TODO noreturn annotation
    /unreachable,
  ],
  #end: [
    /let #n_ok = /phi /I { #begin: #num_bytes_read },
    /ret #n_ok,
  ],
}
