io := @"io.at"



true := #true
false := #false



// in the long run, should be able to automatically reason towards discovering `i1neq b1 b2` equivalence
xor b1 b2 :=
  b1 ?- not b2 |- b2

// in the long run, should be able to automatically arrive at bit-flip equivalence rather
// than a naive compare-and-branch, but more crucially with such in place, look for
// opportunities to instead invert the i1-producing operators that produced `b`
not b :=
  b ?- false |- true



forEach arr_or_slice stuff fn :=
  for 0..arr_or_slice.len _+1 stuff:
    i st -> fn arr_or_slice[i] st

for range step stuff fn :=
  loop {i: range.min, st: stuff} each
  each bag :=
    (bag.i == range.max)  ?- #done #yo #ok new_stuff
                          |- #next { i: step bag.i, st: new_stuff }
    new_stuff := fn bag.i bag.st

loop stuff fn :=
  fn stuff  ?- #done => (stuff_now -> stuff_now)
            |- #next => (stuff_now -> loop stuff_now fn)





// Void        := @T #struct { #fields: {}}
// U8          := @T #integer { #bit_width: 8, #signed: false }
// U16         := @T #integer { #bit_width: 16, #signed: false }
// U32         := @T #integer { #bit_width: 32, #signed: false }
// U64         := @T #integer { #bit_width: 64, #signed: false }
// Uw          := @T #integer { #bit_width: #word, #signed: false }
// Uc          := @T #integer { #bit_width: #extc, #signed: false }
// I8          := @T #integer { #bit_width: 8, #signed: true }
// I16         := @T #integer { #bit_width: 16, #signed: true }
// I32         := @T #integer { #bit_width: 32, #signed: true }
// I64         := @T #integer { #bit_width: 64, #signed: true }
// Iw          := @T #integer { #bit_width: #word, #signed: true }
// Ic          := @T #integer { #bit_width: #extc, #signed: true }
// Boolean     := @T #union { #tagged: true, #fields: { #true: Void, #false: Void } }
// Str n       := Arr n U8
// Ptr of      := @T #ptr { #ty: of }
// Arr n of    := @T #arr { #size: n, #ty: of }
// Slice of    := @T #struct { #fields: { #ptr: Ptr (Arr {} of), #len: Uw } }
